library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity FIFO8x9 is
   port(
      clk, rst:		in std_logic;
      RdPtrClr, WrPtrClr:	in std_logic;    
      RdInc, WrInc:	in std_logic;
      DataIn:	 in std_logic_vector(8 downto 0);
      DataOut: out std_logic_vector(8 downto 0);
      rden, wren: in std_logic
	);
end entity FIFO8x9;

architecture RTL of FIFO8x9 is
	--signal declarations
	type fifo_array is array(7 downto 0) of std_logic_vector(8 downto 0);  -- makes use of VHDLâ€™s enumerated type
	signal fifo:  fifo_array;
	signal wrptr, rdptr: unsigned(2 downto 0);
	signal en: std_logic_vector(7 downto 0);
	signal dmuxout: std_logic_vector(8 downto 0);

begin 
 process(clk,rst) 
			begin
				if rising_edge(clk) then
					if rst = '1' then
						wrptr <= 0;
						rdptr <= 0;
						en <= 0;
					else
					
						-- Keeps track of the total number of words in the FIFO
						if wren = '1' and rden = '1' then
						en <= en + 1;
						elsif wren = '0' and rden = '1' then
						en <= en - 1;
						end if;
						
						-- Keeps track of the write pointer (and controls roll-over)
						if (wren = '1' and WrPtrClr = '0') then
							if wrptr = "111" then
							wrptr <= "000";
							elsif WrInc = '1' then
							wrptr <= wrptr + 1;
							end if;
						end if;
						
						-- Keeps track of the read pointer (and controls roll-over) 
						if (rden = '1' and RdPtrClr = '0') then
							if rdptr = "111" then
							rdptr <= "000";
							elsif RdInc = '1' then
							rdptr <= rdptr + 1;
							end if;
						end if;
						
						-- Registers the input data when there is a write
						if wren = '1' then
						fifo(to_integer(wrptr)) <= DataIn;
						end if;
					end if;
				end if;
			end process;
			DataOut <= fifo(to_integer(rdptr));
		end RTL;